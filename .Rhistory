{
distrDf <- as.data.frame(distr);
names(distrDf) <- c("wt");
distrDf$mth <- as.numeric(row.names(distrDf));
maxVal <- max(distr);
maxValIndex <- as.numeric(row.names(distrDf[distrDf$wt==maxVal,]));
spikeMinusMaxvalindex <- (spike - maxValIndex);
distrDf$mthTemp <- (distrDf$mth + spikeMinusMaxvalindex);
distrDf$mthFinal <- ifelse(distrDf$mthTemp>12,(distrDf$mthTemp-12),distrDf$mthTemp);
distrDf <- distrDf[order(distrDf$mthFinal), ];
distrOut <- distrDf$wt;
return(distrOut);
}
sample(1:10)
as.data.frame(sample(1:10))
df <- as.data.frame(1:5)
df
names(df) <- trans
names(df) <- c('trans')
df
genTrans <- function(cycles, trend, transactions, spike, outliers)
{
#handle missing arguments
cycles <- missingArgHandler(cycles,"y");
trend <- missingArgHandler(trend,1);
transactions <- missingArgHandler(transactions,10000);
outliers <- missingArgHandler(outliers, 1);
#Exception handling.
if(transactions <= 0)
{
stop("Please enter non zero positive integers");
}else if(transactions < 10000)
{
warning("Insights may not be meaningful. Recommended number of transactions for meaningful insights is 10,000.")
}
if(spike > 12 | spike < 1)
{
stop("Please set spike between 1 and 12")
}
if(trend == 1 | trend == -1)
{
}else
{
stop("Please set trend as 1 or -1");
}
if(outliers == 1 | outliers == 0)
{
}else
{
stop("Please set outliers as 1 or 0");
}
#compute weights for 12 months
if(missing(spike))
{
aggDataMth <- as.data.frame(buildDistr(cycles = cycles, trend = trend));
}else
{
distr <- buildDistr(cycles = cycles, trend = trend);
distrspiked <- buildSpike(distr = distr, spike = spike);
aggDataMth <- as.data.frame(distrspiked);
}
colnames(aggDataMth) <- c('distrWt');
wts <- (transactions/sum(aggDataMth$distrWt));
aggDataMth$weights <- (aggDataMth$distrWt*wts);
aggDataMth$mth <- row.names(aggDataMth);
daysInMth <- data.frame(matrix(nrow = 12, ncol = 1))
aggDataMth$days <- c(31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31);
#compute weights for 4 weeks each month
for(i in 1:nrow(aggDataMth))
{
aggDataDayTemp <- as.data.frame(buildDistr(st = 1, en = (aggDataMth$days[i]), cycles = "y", trend = trend));
colnames(aggDataDayTemp) <- c('distrWtWk')
wts <- (aggDataMth$weights[i]/sum(aggDataDayTemp$distrWtWk));
aggDataDayTemp$weights <- (aggDataDayTemp$distrWtWk*wts);
aggDataDayTemp$mth <- aggDataMth$mth[i];
if(i == 1)
{
aggDataDay <- aggDataDayTemp;
}else
{
aggDataDay <- rbind(aggDataDay, aggDataDayTemp);
}
}
aggDataDay$transactions <- round(aggDataDay$weights);
aggDataDay$day <- 1:nrow(aggDataDay);
#add outliers
if(outliers == 1)
{
aggDataDay$transactions <- (buildOutliers(aggDataDay$transactions));
}else if(outliers == 0)
{
aggDataDay <- aggDataDay;
}
aggDataDay$transactions <- round(aggDataDay$transactions, 0);
#build dataframe at transaction level
dfFinal <- data.frame()#build empty df
for(i in 1:nrow(aggDataDay))
{
numOfTrans <- aggDataDay$transactions[i];
dayNum <- aggDataDay$day[i];
temp <- as.data.frame(buildName(numOfItems = numOfTrans, prefix = paste("txn","-",i,"-",sep = "")));
temp$dayNum <- dayNum;
dfFinal <- rbind(dfFinal, temp)
}
return(aggDataDay[,c('day', 'transactions')])
}
genTrans()
missingArgHandler <- function(argMissed,argDefault)
{
out <- ifelse(missing(argMissed),argDefault,argMissed);
return(out)
}
t <- genTrans()
t <- genTrans(spike = 12)
head(t)
genTrans <- function(cycles, trend, transactions, spike, outliers)
{
#handle missing arguments
cycles <- missingArgHandler(cycles,"y");
trend <- missingArgHandler(trend,1);
transactions <- missingArgHandler(transactions,10000);
outliers <- missingArgHandler(outliers, 1);
#Exception handling.
if(transactions <= 0)
{
stop("Please enter non zero positive integers");
}else if(transactions < 10000)
{
warning("Insights may not be meaningful. Recommended number of transactions for meaningful insights is 10,000.")
}
if(spike > 12 | spike < 1)
{
stop("Please set spike between 1 and 12")
}
if(trend == 1 | trend == -1)
{
}else
{
stop("Please set trend as 1 or -1");
}
if(outliers == 1 | outliers == 0)
{
}else
{
stop("Please set outliers as 1 or 0");
}
#compute weights for 12 months
if(missing(spike))
{
aggDataMth <- as.data.frame(buildDistr(cycles = cycles, trend = trend));
}else
{
distr <- buildDistr(cycles = cycles, trend = trend);
distrspiked <- buildSpike(distr = distr, spike = spike);
aggDataMth <- as.data.frame(distrspiked);
}
colnames(aggDataMth) <- c('distrWt');
wts <- (transactions/sum(aggDataMth$distrWt));
aggDataMth$weights <- (aggDataMth$distrWt*wts);
aggDataMth$mth <- row.names(aggDataMth);
daysInMth <- data.frame(matrix(nrow = 12, ncol = 1))
aggDataMth$days <- c(31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31);
#compute weights for 4 weeks each month
for(i in 1:nrow(aggDataMth))
{
aggDataDayTemp <- as.data.frame(buildDistr(st = 1, en = (aggDataMth$days[i]), cycles = "y", trend = trend));
colnames(aggDataDayTemp) <- c('distrWtWk')
wts <- (aggDataMth$weights[i]/sum(aggDataDayTemp$distrWtWk));
aggDataDayTemp$weights <- (aggDataDayTemp$distrWtWk*wts);
aggDataDayTemp$mth <- aggDataMth$mth[i];
if(i == 1)
{
aggDataDay <- aggDataDayTemp;
}else
{
aggDataDay <- rbind(aggDataDay, aggDataDayTemp);
}
}
aggDataDay$transactions <- round(aggDataDay$weights);
aggDataDay$day <- 1:nrow(aggDataDay);
#add outliers
if(outliers == 1)
{
aggDataDay$transactions <- (buildOutliers(aggDataDay$transactions));
}else if(outliers == 0)
{
aggDataDay <- aggDataDay;
}
aggDataDay$transactions <- round(aggDataDay$transactions, 0);
#build dataframe at transaction level
dfFinal <- data.frame()#build empty df
for(i in 1:nrow(aggDataDay))
{
numOfTrans <- aggDataDay$transactions[i];
dayNum <- aggDataDay$day[i];
temp <- as.data.frame(buildName(numOfItems = numOfTrans, prefix = paste("txn","-",i,"-",sep = "")));
temp$dayNum <- dayNum;
dfFinal <- rbind(dfFinal, temp)
}
return(dfFinal)
#return(aggDataDay[,c('day', 'transactions')])
}
t <- genTrans(spike = 12)
head(t)
View(head(t))
View(tail(t))
t[1:10]
t[1:10,]
genTrans <- function(cycles, trend, transactions, spike, outliers)
{
#handle missing arguments
cycles <- missingArgHandler(cycles,"y");
trend <- missingArgHandler(trend,1);
transactions <- missingArgHandler(transactions,10000);
outliers <- missingArgHandler(outliers, 1);
#Exception handling.
if(transactions <= 0)
{
stop("Please enter non zero positive integers");
}else if(transactions < 10000)
{
warning("Insights may not be meaningful. Recommended number of transactions for meaningful insights is 10,000.")
}
if(spike > 12 | spike < 1)
{
stop("Please set spike between 1 and 12")
}
if(trend == 1 | trend == -1)
{
}else
{
stop("Please set trend as 1 or -1");
}
if(outliers == 1 | outliers == 0)
{
}else
{
stop("Please set outliers as 1 or 0");
}
#compute weights for 12 months
if(missing(spike))
{
aggDataMth <- as.data.frame(buildDistr(cycles = cycles, trend = trend));
}else
{
distr <- buildDistr(cycles = cycles, trend = trend);
distrspiked <- buildSpike(distr = distr, spike = spike);
aggDataMth <- as.data.frame(distrspiked);
}
colnames(aggDataMth) <- c('distrWt');
wts <- (transactions/sum(aggDataMth$distrWt));
aggDataMth$weights <- (aggDataMth$distrWt*wts);
aggDataMth$mth <- row.names(aggDataMth);
daysInMth <- data.frame(matrix(nrow = 12, ncol = 1))
aggDataMth$days <- c(31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31);
#compute weights for 4 weeks each month
for(i in 1:nrow(aggDataMth))
{
aggDataDayTemp <- as.data.frame(buildDistr(st = 1, en = (aggDataMth$days[i]), cycles = "y", trend = trend));
colnames(aggDataDayTemp) <- c('distrWtWk')
wts <- (aggDataMth$weights[i]/sum(aggDataDayTemp$distrWtWk));
aggDataDayTemp$weights <- (aggDataDayTemp$distrWtWk*wts);
aggDataDayTemp$mth <- aggDataMth$mth[i];
if(i == 1)
{
aggDataDay <- aggDataDayTemp;
}else
{
aggDataDay <- rbind(aggDataDay, aggDataDayTemp);
}
}
aggDataDay$transactions <- round(aggDataDay$weights);
aggDataDay$day <- 1:nrow(aggDataDay);
#add outliers
if(outliers == 1)
{
aggDataDay$transactions <- (buildOutliers(aggDataDay$transactions));
}else if(outliers == 0)
{
aggDataDay <- aggDataDay;
}
aggDataDay$transactions <- round(aggDataDay$transactions, 0);
#build dataframe at transaction level
dfFinal <- data.frame()#build empty df
for(i in 1:nrow(aggDataDay))
{
numOfTrans <- aggDataDay$transactions[i];
dayNum <- aggDataDay$day[i];
mthNum <- aggDataDay$mth[i];
temp <- as.data.frame(buildName(numOfItems = numOfTrans, prefix = paste("txn","-",i,"-",sep = "")));
temp$dayNum <- dayNum;
temp$mthNum <- mthNum;
dfFinal <- rbind(dfFinal, temp)
}
return(dfFinal)
#return(aggDataDay[,c('day', 'transactions')])
}
t <- genTrans(spike = 12)
View(head(t))
View((t[1:100,]))
View((t[1:150,]))
View((t[1:200,]))
names(t)
View(head(t))
genTrans <- function(cycles, trend, transactions, spike, outliers)
{
#handle missing arguments
cycles <- missingArgHandler(cycles,"y");
trend <- missingArgHandler(trend,1);
transactions <- missingArgHandler(transactions,10000);
outliers <- missingArgHandler(outliers, 1);
#Exception handling.
if(transactions <= 0)
{
stop("Please enter non zero positive integers");
}else if(transactions < 10000)
{
warning("Insights may not be meaningful. Recommended number of transactions for meaningful insights is 10,000.")
}
if(spike > 12 | spike < 1)
{
stop("Please set spike between 1 and 12")
}
if(trend == 1 | trend == -1)
{
}else
{
stop("Please set trend as 1 or -1");
}
if(outliers == 1 | outliers == 0)
{
}else
{
stop("Please set outliers as 1 or 0");
}
#compute weights for 12 months
if(missing(spike))
{
aggDataMth <- as.data.frame(buildDistr(cycles = cycles, trend = trend));
}else
{
distr <- buildDistr(cycles = cycles, trend = trend);
distrspiked <- buildSpike(distr = distr, spike = spike);
aggDataMth <- as.data.frame(distrspiked);
}
colnames(aggDataMth) <- c('distrWt');
wts <- (transactions/sum(aggDataMth$distrWt));
aggDataMth$weights <- (aggDataMth$distrWt*wts);
aggDataMth$mth <- row.names(aggDataMth);
daysInMth <- data.frame(matrix(nrow = 12, ncol = 1))
aggDataMth$days <- c(31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31);
#compute weights for 4 weeks each month
for(i in 1:nrow(aggDataMth))
{
aggDataDayTemp <- as.data.frame(buildDistr(st = 1, en = (aggDataMth$days[i]), cycles = "y", trend = trend));
colnames(aggDataDayTemp) <- c('distrWtWk')
wts <- (aggDataMth$weights[i]/sum(aggDataDayTemp$distrWtWk));
aggDataDayTemp$weights <- (aggDataDayTemp$distrWtWk*wts);
aggDataDayTemp$mth <- aggDataMth$mth[i];
if(i == 1)
{
aggDataDay <- aggDataDayTemp;
}else
{
aggDataDay <- rbind(aggDataDay, aggDataDayTemp);
}
}
aggDataDay$transactions <- round(aggDataDay$weights);
aggDataDay$day <- 1:nrow(aggDataDay);
#add outliers
if(outliers == 1)
{
aggDataDay$transactions <- (buildOutliers(aggDataDay$transactions));
}else if(outliers == 0)
{
aggDataDay <- aggDataDay;
}
aggDataDay$transactions <- round(aggDataDay$transactions, 0);
#build dataframe at transaction level
dfFinal <- data.frame()#build empty df
for(i in 1:nrow(aggDataDay))
{
numOfTrans <- aggDataDay$transactions[i];
dayNum <- aggDataDay$day[i];
mthNum <- aggDataDay$mth[i];
temp <- as.data.frame(buildName(numOfItems = numOfTrans, prefix = paste("txn","-",i,"-",sep = "")));
names(temp) <- c("transactionID")
temp$dayNum <- dayNum;
temp$mthNum <- mthNum;
dfFinal <- rbind(dfFinal, temp)
}
return(dfFinal)
#return(aggDataDay[,c('day', 'transactions')])
}
t <- genTrans()
t <- genTrans(spike = 12)
head(t)
library(conjurer)
transactions <- genTrans(cycles = "y", spike = 12, outliers = 1, transactions = 10000)
View(head(transactions))
test <- c(80,20)
test
class(test)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
aggregatedDataMth <- aggregate(dfFinal$transactionID, by = list(dfFinal$mthNum), length)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
products <- buildProd(numOfProd = 10, minPrice = 5, maxPrice = 50)
print(head(products))
transactions <- genTrans(cycles = "y", spike = 12, outliers = 1, transactions = 10000)
TxnAggregated <- aggregate(transactions$transactionID, by = list(transactions$dayNum), length)
plot(TxnAggregated, type = "l", ann = FALSE)
customer2transaction <- buildPareto(customers, transactions$transactionID, pareto = c(80,20))
names(customer2transaction) <- c('transactionID', 'customer')
#inspect the output
print(head(customer2transaction))
product2transaction <- buildPareto(products$SKU,transactions$transactionID,pareto = c(70,30))
names(product2transaction) <- c('transactionID', 'SKU')
#inspect the output
print(head(product2transaction))
df1 <- merge(x = customer2transaction, y = product2transaction, by = "transactionID")
dfFinal <- merge(x = df1, y = transactions, by = "transactionID", all.x = TRUE)
#inspect the output
print(head(dfFinal))
aggregatedDataMth <- aggregate(dfFinal$transactionID, by = list(dfFinal$mthNum), length)
plot(aggregatedDataMth, type = "b",ann = FALSE)
aggregatedDataMth <- aggregate(dfFinal$transactionID, by = list(dfFinal$mthNum), length)
plot(aggregatedDataMth, type = "b",ann = FALSE)
aggregatedDataMth <- aggregate(dfFinal$transactionID, by = list(dfFinal$mthNum), length)
plot(aggregatedDataMth, type = "o",ann = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
products <- buildProd(numOfProd = 10, minPrice = 5, maxPrice = 50)
print(head(products))
transactions <- genTrans(cycles = "y", spike = 12, outliers = 1, transactions = 10000)
TxnAggregated <- aggregate(transactions$transactionID, by = list(transactions$dayNum), length)
plot(TxnAggregated, type = "l", ann = FALSE)
customer2transaction <- buildPareto(customers, transactions$transactionID, pareto = c(80,20))
names(customer2transaction) <- c('transactionID', 'customer')
#inspect the output
print(head(customer2transaction))
product2transaction <- buildPareto(products$SKU,transactions$transactionID,pareto = c(70,30))
names(product2transaction) <- c('transactionID', 'SKU')
#inspect the output
print(head(product2transaction))
df1 <- merge(x = customer2transaction, y = product2transaction, by = "transactionID")
dfFinal <- merge(x = df1, y = transactions, by = "transactionID", all.x = TRUE)
#inspect the output
print(head(dfFinal))
aggregatedDataDay <- aggregate(dfFinal$transactionID, by = list(dfFinal$dayNum), length)
plot(aggregatedDataDay, type = "l", ann = FALSE)
head(aggregatedDataMth)
aggregatedDataMth[order(Group.1)]
aggregatedDataMth[order("Group.1")]
aggregatedDataMth$Group.1
as.numeric(aggregatedDataMth$Group.1)
plot(aggregatedDataMth)
plot(aggregatedDataMth, type = "l")
aggregatedDataMth[order("Group.1")]
as.numeric(aggregatedDataMth[order("Group.1")])
aggregatedDataMth[order(as.numeric(Group.1))]
aggregatedDataMth[order(as.numeric(aggregatedDataMth$Group.1))]
class(aggregatedDataMth$Group.1)
as.numeric(aggregatedDataMth$Group.1)
aggregatedDataMth$Group.1 <- as.numeric(aggregatedDataMth$Group.1)
aggregatedDataMth[order("Group.1")]
class(aggregatedDataMth$Group.1)
class(aggregatedDataMth)
aggregatedDataMth[order(aggregatedDataMth$Group.1)]
aggregatedDataMth[order(aggregatedDataMth$Group.1),]
unlink('vignettes/introduction_to_conjurer_cache', recursive = TRUE)
aggregatedDataMth <- aggregatedDataMth[order(aggregatedDataMth$Group.1),]
plot(aggregatedDataMth, type = "o",ann = FALSE)
rm(list = ls())
ls()
unlink('vignettes/introduction_to_conjurer_cache', recursive = TRUE)
x <- 1:12
x
plot(sin(0.5*x)+cos(0.5*x)+2)
plot(sin(0.6*x)+cos(0.5*x)+2)
plot(sin(0.6*x)+cos(0.6*x)+2)
plot(sin(0.6*x)+cos(0.2*x)+2)
plot(sin(0.6*x)+cos(0.3*x)+2)
plot(sin(0.6*x)+cos(0.2*x)+2)
plot(sin(2*x)+cos(0.2*x)+2)
plot(sin(2*x)+cos(0.5*x)+2)
plot(sin(2*x)+cos(0.5*x)+2, type = "l")
plot(sin(2*x)+cos(0.7*x)+2, type = "l")
sample(seq(0.5, 2.5, by = 0.25),1)
sample(seq(0.5, 2.5, by = 0.25),2)
plot(sin(0.2*x)+cos(0.2*x)+2, type = "l")
plot(sin(0.2*x)+cos(0.8*x)+2, type = "l")
plot(sin(0.8*x)+cos(0.2*x)+2, type = "l")
plot(sin(0.5*x)+cos(0.2*x)+2, type = "l")
plot(sin(0.5*x)+cos(2*x)+2, type = "l")
plot(sin(0.6*x)+cos(0.6*x)+2, type = "l")
plot(sin(0.2*x)+cos(0.6*x)+2, type = "l")
plot(sin(0.2*x)+cos(0.2*x)+2, type = "l")
plot(sin(0.2*x)+cos(0.5*x)+2, type = "l")
