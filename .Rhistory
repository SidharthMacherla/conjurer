library(conjurer)
library(conjurer)
library(conjurer)
vignette(conjurer)
vignette("conjurer")
vignette()
vignette('conjurer')
clear
unlink('C:/Users/sidharth.macherla/Desktop/test_cache', recursive = TRUE)
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
citation()
unlink('vignettes/Conjurer_Methodology_cache', recursive = TRUE)
install.packages("withr")
library(conjurer)
products <- buildProd(numOfProd = 10, minPrice = 5, maxPrice = 50)
print(head(products))
productHierarchy <- buildHierarchy(type = "equalSplit", splits = 2, numOfLevels = 2)
print(productHierarchy)
names(productHierarchy) <- c("Category", names(productHierarchy) <- c("Category", "SubCategory")
print(productHierarchy)
names(productHierarchy)
names(productHierarchy) <- c("Category", "SubCategory")
print(productHierarchy)
gsub("Level_1_element_1", "Food", productHierarchy$Category)
print(productHierarchy)
productHierarchy$Category <- gsub("Level_1_element_1", "Food", productHierarchy$Category)
print(productHierarchy)
productHierarchy$Category <- gsub("Level_1_element_2", "Non-Food", productHierarchy$Category)
print(productHierarchy)
productHierarchy$SubCategory <- gsub("Level_2_element_1", "Beverages")
productHierarchy$SubCategory <- gsub("Level_2_element_3", "Dairy")
productHierarchy$SubCategory <- gsub("Level_2_element_2", "Sanitary")
productHierarchy$SubCategory <- gsub("Level_2_element_4", "Household")
productHierarchy$SubCategory <- gsub("Level_2_element_1", "Beverages", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_3", "Dairy", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_2", "Sanitary", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_4", "Household", productHierarchy$SubCategory)
print(productHierarchy)
productHierarchy <- productHierarchy[order(productHierarchy$Category)]
productHierarchy <- productHierarchy[,order(productHierarchy$Category)]
productHierarchy <- productHierarchy[order(productHierarchy$Category),]
print(productHierarchy)
products
cbind(products, productHierarchy)
cbind(productHierarchy,products)
buildPareto(products$SKU,productHierarchy$SubCategory,pareto = c(50,50))
list(productHierarchy)
list1 <- productHierarchy$Category
list1
list2 <- productHierarchy$SubCategory
list2
ph <- list(list1,list2)
ph
list3 <- products$SKU
list3
cbind(list1,list2,list3)
View(list3)
View(cbind(list1,list2,list3))
products$SKU
cbind(list2,list3)
cbind(list3,list1,list2)
cbind(list3,list1,list2,stringsAsFactors = TRUE)
cbind(list3,list1,list2,stringsAsFactors = FALSE)
x <- data.frame(a = letters[1:5], b = 1:5)
y <- cbind(x, c = LETTERS[1:5])
x
y
y <- cbind(x, c = LETTERS[1:3])
x
cbind(list1,list2)
cbind(list1,list2,[1:10])
cbind(list1,list2,1:10)
cbind(list1,list2,10)
cbind(list1,list2,1:10)
as.data.frame(cbind(list1,list2,1:10))
Category <- productHierarchy$Category
SubCategory <- productHierarchy$SubCategory
as.data.frame(cbind(Category,SubCategory,seq_along(products)))
as.data.frame(cbind(Category,SubCategory,1:nrow(products)))
products
cbind(products, productHierarchy[,c("Category","SubCategory")])
productHierarchy[,c("Category","SubCategory")]
productHierarchy <- as.data.frame(cbind(Category,SubCategory,seq_along(products)))
productHierarchy[,c("Category","SubCategory")]
productHierarchy
productHierarchy <- as.data.frame(cbind(Category,SubCategory,1:nrow(products)))
products <- buildProd(numOfProd = 10, minPrice = 5, maxPrice = 50)
productHierarchy <- buildHierarchy(type = "equalSplit", splits = 2, numOfLevels = 2)
Category <- productHierarchy$Category
SubCategory <- productHierarchy$SubCategory
productHierarchy <- as.data.frame(cbind(Category,SubCategory,1:nrow(products)))
productHierarchy
productHierarchy <- buildHierarchy(type = "equalSplit", splits = 2, numOfLevels = 2)
productHierarchy
#Rename the dataframe
names(productHierarchy) <- c("Category", "SubCategory")
#Replace Category with Food and Non-Food
productHierarchy$Category <- gsub("Level_1_element_1", "Food", productHierarchy$Category)
productHierarchy$Category <- gsub("Level_1_element_2", "Non-Food", productHierarchy$Category)
#Replace SubCategories
productHierarchy$SubCategory <- gsub("Level_2_element_1", "Beverages", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_3", "Dairy", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_2", "Sanitary", productHierarchy$SubCategory)
productHierarchy$SubCategory <- gsub("Level_2_element_4", "Household", productHierarchy$SubCategory)
#Inspect the data to confirm the results
productHierarchy <- productHierarchy[order(productHierarchy$Category),]
print(productHierarchy)
Category <- productHierarchy$Category
SubCategory <- productHierarchy$SubCategory
as.data.frame(cbind(Category,SubCategory,1:nrow(products)))
productHierarchy <- as.data.frame(cbind(Category,SubCategory,1:nrow(products)))
productHierarchy
productHierarchy[,c("Category","SubCategory")]
cbind(products, productHierarchy[,c("Category","SubCategory")])
products <- cbind(products, productHierarchy[,c("Category","SubCategory")])
library(conjurer)
library(conjurer)
library(conjurer)
library(conjurer)
library(conjurer)
unlink('vignettes/introduction_to_conjurer_cache', recursive = TRUE)
library(conjurer)
library(conjurer)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
custNames <- as.data.frame(buildNames(numOfNames = 100, minLength = 5, maxLength = 7))
#set column heading
colnames(custNames) <- c("customerName")
print(head(custNames))
df3 <- merge(x = df2, y = customer2name, by.x = "customer", by.y = "customers", all.x = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
custNames <- as.data.frame(buildNames(numOfNames = 100, minLength = 5, maxLength = 7))
#set column heading
colnames(custNames) <- c("customerName")
print(head(custNames))
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
custNames <- as.data.frame(buildNames(numOfNames = 100, minLength = 5, maxLength = 7))
#set column heading
colnames(custNames) <- c("customerName")
print(head(custNames))
custNames <- as.data.frame(buildNames(numOfNames = 100, minLength = 5, maxLength = 7))
#set column heading
colnames(custNames) <- c("customerName")
#print(head(custNames))
customer2name <- cbind(customers, custNames)
#set column heading
print(head(customer2name))
custAge <- as.data.frame(round(buildNum(n = 10, st = 23, en = 80, disp = 0.5, outliers = 1)))
#set column heading
colnames(custAge) <- c("customerAge")
print(head(custAge))
customer2age <- cbind(customers, custAge)
#set column heading
print(head(customer2age))
parts <- list(c("+91","+44","+64"), c("("), c(491,324,211), c(")"), c(7821:8324))
probs <- list(c(0.25,0.25,0.50), c(1), c(0.30,0.60,0.10), c(1), c())
custPhoneNumbers <- as.data.frame(buildPattern(n=20,parts = parts, probs = probs))
library(conjurer)
unlink('vignettes/introduction_to_conjurer_cache', recursive = TRUE)
library(conjurer)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(conjurer)
customers <- buildCust(numOfCust =  100)
print(head(customers))
custNames <- as.data.frame(buildNames(numOfNames = 100, minLength = 5, maxLength = 7))
#set column heading
colnames(custNames) <- c("customerName")
print(head(custNames))
customer2name <- cbind(customers, custNames)
#set column heading
print(head(customer2name))
custAge <- as.data.frame(round(buildNum(n = 10, st = 23, en = 80, disp = 0.5, outliers = 1)))
#set column heading
colnames(custAge) <- c("customerAge")
print(head(custAge))
customer2age <- cbind(customers, custAge)
#set column heading
print(head(customer2age))
parts <- list(c("+91","+44","+64"), c("("), c(491,324,211), c(")"), c(7821:8324))
probs <- list(c(0.25,0.25,0.50), c(1), c(0.30,0.60,0.10), c(1), c())
custPhoneNumbers <- as.data.frame(buildPattern(n=100,parts = parts, probs = probs))
head(custPhoneNumbers)
#set column heading
colnames(custPhoneNumbers) <- c("customerPhone")
print(head(custPhoneNumbers))
customer2phone <- cbind(customers, custPhoneNumbers)
#set column heading
print(head(customer2phone))
products <- buildProd(numOfProd = 10, minPrice = 5, maxPrice = 50)
print(head(products))
productHierarchy <- buildHierarchy(type = "equalSplit", splits = 2, numOfLevels = 2)
print(productHierarchy)
#Rename the dataframe
names(productHierarchy) <- c("category", "subcategory")
#Replace category with Food and Non-Food
productHierarchy$category <- gsub("Level_1_element_1", "Food", productHierarchy$category)
productHierarchy$category <- gsub("Level_1_element_2", "Non-Food", productHierarchy$category)
#Replace subCategories
productHierarchy$subcategory <- gsub("Level_2_element_1", "Beverages", productHierarchy$subcategory)
productHierarchy$subcategory <- gsub("Level_2_element_3", "Dairy", productHierarchy$subcategory)
productHierarchy$subcategory <- gsub("Level_2_element_2", "Sanitary", productHierarchy$subcategory)
productHierarchy$subcategory <- gsub("Level_2_element_4", "Household", productHierarchy$subcategory)
#Inspect the data to confirm the results
productHierarchy <- productHierarchy[order(productHierarchy$category),]
print(productHierarchy)
transactions <- genTrans(cycles = "y", spike = 12, outliers = 1, transactions = 10000)
TxnAggregated <- aggregate(transactions$transactionID, by = list(transactions$dayNum), length)
plot(TxnAggregated, type = "l", ann = FALSE)
customer2transaction <- buildPareto(customers, transactions$transactionID, pareto = c(80,20))
customer2transaction <- buildPareto(customers, transactions$transactionID, pareto = c(80,20))
customer2transaction <- buildPareto(customers, transactions$transactionID, pareto = c(80,20))
names(customer2transaction) <- c('transactionID', 'customer')
#inspect the output
print(head(customer2transaction))
names(customer2transaction) <- c('transactionID', 'customer')
#inspect the output
print(head(customer2transaction))
#First step is to ensure that the product hierarchy data frame has the same number of rows as number of products.
category <- productHierarchy$category
subcategory <- productHierarchy$subcategory
productHierarchy <- as.data.frame(cbind(category,subcategory,1:nrow(products)))
#Randomly assign the product hierarchy to the products. Ensure that the additional unused variable towards the end is dropped.
products <- cbind(products, productHierarchy[,c("category","subcategory")])
#inspect the output
print(head(products))
product2transaction <- buildPareto(products$SKU,transactions$transactionID,pareto = c(70,30))
names(product2transaction) <- c('transactionID', 'SKU')
#inspect the output
print(head(product2transaction))
df1 <- merge(x = customer2transaction, y = product2transaction, by = "transactionID")
df2 <- merge(x = df1, y = transactions, by = "transactionID", all.x = TRUE)
#inspect the output
print(head(df2))
df3 <- merge(x = df2, y = customer2name, by.x = "customer", by.y = "customers", all.x = TRUE)
df4 <- merge(x = df3, y = customer2age, by.x = "customer", by.y = "customers", all.x = TRUE)
df5 <- merge(x = df4, y = customer2phone, by.x = "customer", by.y = "customers", all.x = TRUE)
df6 <- merge(x = df5, y = products, by = "SKU", all.x = TRUE)
dfFinal <- df5[,c("dayNum", "mthNum", "customer", "customerName", "customerAge", "customerPhone", "transactionID", "SKU", "Price", "category","subcategory")]
df3 <- merge(x = df2, y = customer2name, by.x = "customer", by.y = "customers", all.x = TRUE)
df4 <- merge(x = df3, y = customer2age, by.x = "customer", by.y = "customers", all.x = TRUE)
df5 <- merge(x = df4, y = customer2phone, by.x = "customer", by.y = "customers", all.x = TRUE)
df6 <- merge(x = df5, y = products, by = "SKU", all.x = TRUE)
dfFinal <- df6[,c("dayNum", "mthNum", "customer", "customerName", "customerAge", "customerPhone", "transactionID", "SKU", "Price", "category","subcategory")]
#inspect the output
print(head(dfFinal))
library(conjurer)
